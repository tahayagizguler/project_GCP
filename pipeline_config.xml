<flow-definition plugin="workflow-job@1316.vd2290d3341a_f">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description/>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.37.1">
      <projectUrl>https://github.com/tahayagizguler/deploy_appserver.git/</projectUrl>
      <displayName/>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.1">
          <spec/>
        </com.cloudbees.jenkins.GitHubPushTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3722.v85ce2a_c6240b_">
    <script/>
    <script>
        pipeline {
            agent any
            stages {
                stage('Checkout SCM') {
                    steps {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: 'dev1']],
                            userRemoteConfigs: [[
                                url: 'https://github.com/tahayagizguler/deploy_appserver.git'
                            ]]
                        ])
                    }
                }

                stage('Syntax Test') {
                    steps {
                        script {
                            def syntaxCheckResult = sh(returnStatus: true, script: 'find . -name "*.php" -print0 | xargs -0 -n1 php -l')
                            if (syntaxCheckResult != 0) {
                                error('Syntax check failed.')
                            }
                        }
                    }
                }

                stage('Merge') {
                    steps {
                        withCredentials([string(credentialsId: 'GIT_TOKEN', variable: 'GIT_TOKEN')]) {
                            sh '''
                                git branch
                                git checkout master
                                git merge -X theirs origin/dev1
                                git push -f https://tahayagizguler:${GIT_TOKEN}@github.com/tahayagizguler/deploy_appserver.git master'''
                        }
                    }
                }

                stage('Deploy') {
                    steps {
                        sshPublisher(publishers: [
                            sshPublisherDesc(configName: 'App Server 1', transfers: [
                                sshTransfer(cleanRemote: false, excludes: '', execCommand: 'mv /var/www/html/blue.php /var/www/html/index.php', execTimeout: 120000,
                                    flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                                    patternSeparator: '[, ]+', remoteDirectory: '/var/www/html',
                                    remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*')
                            ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false),

                            sshPublisherDesc(configName: 'App Server 2', transfers: [
                                sshTransfer(cleanRemote: false, excludes: '', execCommand: 'mv /var/www/html/green.php /var/www/html/index.php', execTimeout: 120000,
                                    flatten: false, makeEmptyDirs: false, noDefaultExcludes: false,
                                    patternSeparator: '[, ]+', remoteDirectory: '/var/www/html',
                                    remoteDirectorySDF: false, removePrefix: '', sourceFiles: '*')
                            ], usePromotionTimestamp: false, useWorkspaceInPromotion: false, verbose: false)
                        ])
                    }
                }
            }
        }

    
    </script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
